#### JAVA SCRIPT WRITE ###
name = milan;

React = <H1>{name}</H1>
Angular = <H1>{{name}}</H1>
Express = <H1><%=name%></H1>


// How To Create Server

const http = require('http'); // Get Http from nodejs 
// Call CreateServer Function and Add portnumber to listen
http.createServer((req,res)=>{ //res = response , req = reqest
    res.writeHead(200,{'Context-Type':'Application/json'}); //Header write
    res.write("Output"); // Show Output
    res.end(); // Response End
}).listen(5000);


// How to Export Variable

const name =[
    {
        name:'milan',
        surname:'kotadiya'
    },
    {
        name:'mukesh',
        surname:'desai'
    }
]

module.exports=name; // export it
const nametake = require('./Summery'); // import it
nametake[0].name; // get data from it


//file system (fs)
const fs = require('fs');
const path =require('path');
const filepath = path.join(__dirname,'Folder name'); //_dirname = current location

// Create New File
fs.writeFileSync(filepath+'/Filename.filetype','File Content')

//Delete File 
fs.unlinkSync(`${dirname}/File Name`)

// Read files And Other Operations
const fs = require('fs');
const path = require('path');
const dirction = path.join(__dirname,'Test')
fs.writeFileSync(dirction+"/First.txt","First time Edit"); // Create File
fs.unlinkSync(dirction+"/First.txt"); // Delete File

fs.readFile(dirction+"/First.txt",(err,item)=>{ //Read File
    if(!err) {console.log(item)}
}); // we have to add language

fs.readFile(dirction+"/First.txt",'utf8',(err,item)=>{ // Read File With Spacific Language
    console.log(item)
}); // Added Language type utf8

// Edit (Add Text) in file
fs.appendFile(dirction+"/First.txt"," New Text Added by Milan", (err,item)=>{
 if(!err) { console.log('File Updated')}
});

// Rename File Name
fs.rename(dirction+"/First.txt",dirction+"/Renamed.txt",(err,item)=>{
    if (!err) {console.log("File is Renamed")}
});

fs.readdir(dirction,(err,list)=>{
    if(!err){console.log(list)}
}); // It will Give Array


fs.readdir(dirction,(err,list)=>{
    if(!err) {list.forEach((item)=>{
        console.log(item)})}
}); // It will Give Single Items


// About Promises
let a = 20;
let b = 20;

let Exactresult = new Promise((resolve,reject)=>{
    setTimeout(()=>{
        resolve(40)
    },3000) // It take time So Result Will Wait Otherwise Result will be 40 which is wrong(Unexpected);
})
//console.log(a+b)  = it will show 40
Exactresult.then((b)=>{
    console.log(a+b); // now it will show 60
})




// Express js App 

### Folder Stracture ###
Project Folder => index.js And "views" folder // don't use another name of folder it's fixed name.
inside "views" folder => "common" folder and page file (home.ejs, profile.ejs) // don't use another name of folder it's fixed name. => there is common components like navbar.ejs //make all files of expressjs in .ejs type.


const express = require('express'); // import express
const app = express(); // make it functional



app.set('view engine','ejs');
app.get('/',(req,resp)=>{
    resp.render('common/header'); 
})

app.get('/profile',(req,resp)=>{
    const profiledata = {
        name:'Milan',
        surname:'Kotadiya',
        email: 'mvkotadiya50@gmail.com',
        skills : ['HTML','CSS','Java Script','React','Bootstrap','Figma'] 
    }
    resp.render('profile',{profiledata}); //render ejs file
})

app.get('/login',(req,resp)=>{
    resp.render('login'); //render ejs file
})


app.listen(5000); 



// Page Syntax:
// app.<method>('pagepath',//page-function ); that's it.
// app.get('/about',(request,response)=>{
//    response.send("Page Content")
// }); that's it.

app.get('',(req,res)=>{
        res.send("This is Home Page")
})

app.get('/about',(req,res)=>{
    res.send("This is About Page")
})

app.get('/help',(req,res)=>{
    res.send("This is Help Page")
})

app.listen(5000); // app will be shown in 5000 port



//const express = require('express'); 
//const app = express(); 

app.get('',(req,res)=>{
    //        req.query // it will give us clients request as a object
    // example localhost:5000/?name=milan it will give us {name:milan}
    //ww will request ?name=Milan so 
        //    res.send("This is Home Page Mr "+req.query) // result  This is Home Page Mr [object Object]
            res.send("This is Home Page Mr "+req.query.name) // result  This is Home Page Mr Milan
    })
    
    // app.get('/about',(req,res)=>{
    //     res.send("This is About Page")
    // })
    
    // app.get('/help',(req,res)=>{
    //     res.send("This is Help Page")
    // })
    
    // app.listen(5000); 

    //html page access 
    const express = require('express');
const path = require('path');

//console.log(__dirname); //for see current directory
const websitepath = path.join(__dirname,'Testwebsite')
//console.log(websitepath); //for make path right to website


//const app = express();
// app.use(express.static(websitepath));
app.get('/',(req,resp)=>{
    resp.sendFile(`${websitepath}/about.html`); //html file without .html in path
})

app.listen(5000); 
//localhost:5000/about.html

//# static website via Ejs
//make folder named views and make page with.ejs

const express = require('express');
const path = require('path');

//const websitepath = path.join(__dirname,'Testwebsite')


//const app = express();
app.set('view engine','ejs');
app.get('/',(req,resp)=>{
    resp.sendFile(`${websitepath}/about.html`); 
})

app.get('/profile',(req,resp)=>{
    const profiledata = {
        name:'Milan',
        surname:'Kotadiya',
        email: 'mvkotadiya50@gmail.com',
        skills : ['HTML','CSS','Java Script','React','Bootstrap','Figma'] //object
    }
    resp.render('profile',{profiledata});
    // in the views folder, profile page get data <%=profiledata.name%> and use forEach() for array
})

app.listen(5000); 
 
//# usefilter (Middleware)
const express = require('express');
const path = require('path');

// const websitepath = path.join(__dirname,'Testwebsite');
// const app = express();
const reqquestFilter = (req,resp,next)=>{ //add filter
    if(!req.query.age){ //add condition
        resp.send('please add age')
    }
    else if (req.query.age<18) {
        resp.send('You are too small for this')
    }
    else{
        next(); //go to next
    }
}
app.use(reqquestFilter) // call the filter

app.set('view engine','ejs');
app.get('/',(req,resp)=>{
    resp.sendFile(`${websitepath}/about.html`); 
})

app.get('/profile',(req,resp)=>{
    const profiledata = {
        name:'Milan',
        surname:'Kotadiya',
        email: 'mvkotadiya50@gmail.com',
        skills : ['HTML','CSS','Java Script','React','Bootstrap','Figma'] 
    }
    resp.render('profile',{profiledata});
})

app.get('/login',(req,resp)=>{
    resp.render('login');
})


app.listen(5000); 


//middleware in specific page
const express = require('express');
const path = require('path');

//const websitepath = path.join(__dirname,'Testwebsite');
//const app = express();
// const reqquestFilter = (req,resp,next)=>{ 
//     if(!req.query.age){ 
//         resp.send('please add age')
//     }
//     else if (req.query.age<18) {
//         resp.send('You are too small for this')
//     }
//     else{
//         next(); 
//     }
// }
// app.use(reqquestFilter)  remove from app filter

app.set('view engine','ejs');
app.get('/',(req,resp)=>{
    resp.sendFile(`${websitepath}/about.html`); 
})

app.get('/profile',(req,resp)=>{
    const profiledata = {
        name:'Milan',
        surname:'Kotadiya',
        email: 'mvkotadiya50@gmail.com',
        skills : ['HTML','CSS','Java Script','React','Bootstrap','Figma'] 
    }
    resp.render('profile',{profiledata});
})

app.get('/login',reqquestFilter,(req,resp)=>{ //add specific route page filter
    resp.render('login');
})


app.listen(5000); 
////middleware in page group
const express = require('express');
const path = require('path');

// const websitepath = path.join(__dirname,'Testwebsite');
// const app = express();
// const route = express.Router();//create router for middleware

// const reqquestFilter = (req,resp,next)=>{  // create middleware
//     if(!req.query.age){ 
//         resp.send('please add age')
//     }
//     else if (req.query.age<18) {
//         resp.send('You are too small for this')
//     }
//     else{
//         next(); 
//     }
// }

route.use(reqquestFilter) //use fildter in route

app.set('view engine','ejs');
app.get('/',(req,resp)=>{
    resp.sendFile(`${websitepath}/about.html`); 
})

app.get('/profile',(req,resp)=>{
    const profiledata = {
        name:'Milan',
        surname:'Kotadiya',
        email: 'mvkotadiya50@gmail.com',
        skills : ['HTML','CSS','Java Script','React','Bootstrap','Figma'] 
    }
    resp.render('profile',{profiledata});
})

route.get('/login',(req,resp)=>{  //use route insted app
    resp.render('login');
})


route.get('/extra',(req,resp)=>{ 
    resp.send('extra page');
})
app.use('/',route) // give permission to use route
app.listen(5000); 



##### Mongodb ######
1) Download and install Mongodb from online
2) connect Database
3) Click on database and create database with name and one collection is necessary.
4) Add data in collection manualy by compass.

	Example : /** 
* Paste one or more documents here
*/
{
  "_id": {
    "$oid": "63b70d36ed92b962818bfd31"
  }, 
"name":"vijay",
"surname":"pansuriya"
}


5) for view current database = db

Command Lines 
# For Goto "New"(name of database) database/switch database = use new
# add data in collection = db.collectionname.insertOne({name:'milan',surname:'kotadiya'}) = one object only

		db.collectionname.insertMany(for add multiple Data)
# for check data = db.collectionname.find()
# update data = db.collectionname.updateOne({anyoneproperty for find},{$set{property which we want to update}})
	example = {
			name:"milan"
			surname:"patel"
			}
This is object in "test" collection in "New" database and i want to change surname then,
	for go to that collection = use New,
	db.test.updateOne({name:"milan"},{$set{surname:"kotadiya"}})
# for delete = db.collectionname.deleteOne({name:"milan"})	

### Connect Mongobd with Nodejs ####
open project folder in vs code,
terminal = D:\Office_Work\Node_JS> npm i mongodb

## import mongobd in "index.js" file = const {MongoClient} = require('mongodb');  
						or const MongoClient = require('mongodb').MongoClient; 

## create path of mongodb = const url = "mongodb://0.0.0.0:27017" [it is local database path]

## conect mongoclient with database = const client = new MongoClient(url);  

## Database name = const database = "newdatabase"; 

## name of collection or library = const collection = "test"; 


make function for getdata 

async function getData() { // we have to sync becase of timeout function for get currect result
    let connectfun = await client.connect(); //client will be connect, by connect()[connect function],, we have to wait for respond also
    let db = connectfun.db(database); // connect that client with database, by db()[database function], we have to give databasename as paramater
    let collectionname = db.collection(collection); // connect database with collection, by collection()[collection function], we have to give collectionname as paramater
    let result = await collection.find({}).toArray(); // get data from that collection, by find()[find function], we have to give emptyobject{} as paramater,, we have to wait for respond also
    console.log(result);
}

## call the function = getData(); 


#### make seperate file of mongodb connection ####

Example :

const MongoClient = require('mongodb').MongoClient;
const url = 'mongodb://0.0.0.0:27017';
const client = new MongoClient(url);

const dbName = 'MilanDb';
const collectionName = 'UserData';

async function Server() {
    let connetclient = await client.connect();
    let connectdb = connetclient.db(dbName);
    let connectColle = await connectdb.collection(collectionName);

    return connectColle
    
}

module.exports = Server;

#### use Exported Server Connection ### 


### read data

async function GetData() {
    let Getcollection = await Server();
    let data = await Getcollection.find({}).toArray()

    return console.log(data)
    
}

GetData()


## insert Data One

const Server = require('./mongodb');

async function Insertdata() {
    let Acesscollection = await Server();
    console.log(Acesscollection.find({}).toArray());

    let Insertobject = await Acesscollection.insertOne({
        name:"Navya",
        surname:"Bhanderi"
    });
    console.log("Data Inserted")
    console.log( await Acesscollection.find({}).toArray());
}

Insertdata()

#### Insert Many

const Server = require('./mongodb');

async function InsertdataMany() {
    let Acesscollection = await Server();
    console.log(Acesscollection.find({}).toArray());

    let Insertobject = await Acesscollection.insertMany([{name:"Navya",surname:"Bhanderi"},{name:"Swati",surname:"Bhanderi"},{name:"Rahul",surname:"Patel"}]);
    console.log("Data Inserted")
    console.log( await Acesscollection.find({}).toArray());
}

InsertdataMany()



## Delete Data


const Server = require('./mongodb');

async function DeleteData() {
    let Acesscollection = await Server();
    console.log(Acesscollection.find({}).toArray());

    let Insertobject = await Acesscollection.deleteOne({
        name:"Navya",
    });
    console.log("Data Deleted")
    console.log( await Acesscollection.find({}).toArray());
}

DeleteData()


### Update Data

const Server = require('./mongodb');

async function UpdateData() {
    let Acesscollection = await Server();
    console.log(Acesscollection.find({}).toArray());

    let Insertobject = await Acesscollection.updateOne({ name: "Navya" }, {$set: { name: "Ninu" }});
    console.log("Data Updated")
    console.log( await Acesscollection.find({}).toArray());
}

UpdateData()


// curd operation by method of postmen

const Server = require('./mongodb');
const express = require('express');
const app = express();




// // Get Method - Read Data (Postman)
// app.get('/', async (req,resp)=>{
//     let database = await Server();
//     console.log("server Connected");
//     let result = await database.find().toArray();
//     console.log("Getting Data Succesfully");
//     resp.send(result);
//     // console.log("We have Served what you have asked for")
// resp.end();

// })

// Post method - Insert Data (Postman)
// app.use(express.json()) // for accept json formate data via postmen

// app.post('/', async (req,resp)=>{
//     let servercall = await Server();
//     let insertdata = await servercall.insertOne(req.body)
//     console.log(await servercall.find().toArray())
//     console.log('connected')
//     console.log(req.body)
//     resp.send(req.body)
// resp.end();

// })

// Put method - Update Data (Postman)
// app.use(express.json()) // for accept json formate data via postmen

// app.put('/',async (req,resp)=>{
//     let startserver = await Server();
//     await startserver.updateOne(
//         {name:req.body.name},
//         {$set:req.body}
//         )
//     console.log("Name has been Updated")
// resp.end();

    
// })

// Other Option by url  
// app.use(express.json()) // for accept json formate data via postmen

// app.put('/:name',async (req,resp)=>{
//         let startserver = await Server();
//         await startserver.updateOne(
//             {name:req.params.name},
//             {$set:req.body}
//             )
//         console.log("Name has been Updated")
// resp.end();

//     }) 



//Delete Method - Delete Data (Postman)

// app.use(express.json()) // for accept json formate data via postmen

// app.delete('/', async (req,resp)=>{
//     let runserver = await Server();
//     await runserver.deleteOne(req.body);
//     console.log("Data Deleted");
//     resp.end();

// })

// app.listen(9000);



##### Mongoose Installation

Project Directory cmd => npm i mongoose

mongoose Schema = set rules for selected entry {name or surname etc} with selected type (string, or Number)



const mongoose = require('mongoose') // import mongoose

 async function AddData(){
    mongoose.set('strictQuery', false) // remove strict mode of mongoose
    connectdatabase = await mongoose.connect('mongodb://0.0.0.0:27017/MilanDb')  //take mongoose, use connecfunction and pass url/Collectionname as a props 
    const setSchema = new mongoose.Schema({ // set Schema as a new Schema function, as a parameter give rules 
        username:String,
        pasword:String
    })
    const useschematocollection = mongoose.model('users',setSchema) // use that schema for specific collection by use as a model function and give collection name and schema as a paramater
    const insertdata =  await new useschematocollection({username:"Milan", pasword:"milan@123",number:8155936148}).save(); // add a data as a new useschematocollection function and data and save it by save function
    console.log(insertdata)
}

AddData()


// ### Insert data by Mongoose

// const mongoose = require('mongoose') // import mongoose

//  async function AddData(){
//     mongoose.set('strictQuery', false) // remove strict mode of mongoose
//     connectdatabase = await mongoose.connect('mongodb://0.0.0.0:27017/MilanDb')  //take mongoose, use connecfunction and pass url/Collectionname as a props 
//     const setSchema = new mongoose.Schema({ // set Schema as a new Schema function, as a parameter give rules 
//         username:String,
//         pasword:String
//     })
//     const useschematocollection = mongoose.model('users',setSchema) // use that schema for specific collection by use as a model function and give collection name and schema as a paramater
//     const insertdata =  await new useschematocollection({username:"Milan", pasword:"milan@123",number:8155936148}).save(); // add a data as a new useschematocollection function and data and save it by save function
//     console.log(insertdata)
// }

// AddData()


// Read Data data by Mongoose

// const mongoose = require('mongoose');
// mongoose.set('strictQuery', false);
// mongoose.connect('mongodb://0.0.0.0:27017/MilanDb');

// async function readData(){

//     let setSchema = new mongoose.Schema({
//         username:String,
//         pasword: String
//     });
//     let passchema = mongoose.model('users', setSchema);
//     let Seedata =  await passchema.find({username:"Milan"});
//     console.log(Seedata)
// }

// readData()

// Update Data data by Mongoose

// const mongoose = require('mongoose');

// async function UpdateData() {
//     mongoose.set('strictQuery', false);

// await    mongoose.connect('mongodb://0.0.0.0:27017/MilanDb');

//     let Schema = new mongoose.Schema({
//                     username:String,
//                     pasword: String   
//     })

//     let model = mongoose.model('users', Schema);
//     let update =  await model.updateOne(
//         {username:"Milan"},
//         {$set:{pasword:"Milan@1234"}}
//         );

//      console.log(update)
    
// }

// UpdateData()


// Delete Data data by Mongoose

// const mongoose = require('mongoose') // import mongoose

//  async function Delete(){
//     mongoose.set('strictQuery', false) // remove strict mode of mongoose
//     connectdatabase = await mongoose.connect('mongodb://0.0.0.0:27017/MilanDb')  //take mongoose, use connecfunction and pass url/Collectionname as a props 
//     const setSchema = new mongoose.Schema({ // set Schema as a new Schema function, as a parameter give rules 
//         username:String,
//         pasword:String
//     })
//     const useschematocollection = mongoose.model('users',setSchema) // use that schema for specific collection by use as a model function and give collection name and schema as a paramater
//     const insertdata =  await useschematocollection.deleteOne({username:"Milan"}); // add a data as a new useschematocollection function and data and save it by save function
//     console.log(insertdata)
// }

// Delete()


// ##### Use Multer for file upload

// Project Directory cmd => npm i multer

const express = require('express'); /// There is Error in code
const multer = require('multer');
// const app = express();

const upload = multer({ //use multer
    storage:multer.diskStorage({  //use multer diskstorage() for store file 
        destination: function (req, file ,cb) { //give path by use call back() function
            cb(null,"/uploads") //folder name
        },
        filename: function (req, file ,cb){
            cb(null,file.filename +".jpg") // give file name by use file.filename or field name
        }})
}); // add fileupload type = single file or multiple file






app.post('/upload',upload.single("avatar"), (req,resp)=>{ // use "upoload" as a miidleware
    resp.send('File Upload')
    resp.end();
})

app.listen(3000);



// ### os module // operating system
const os = require('os');
// console.log(os.arch());/// bit verion = 32bit 64 bit
// console.log(os.cpus());/// cpu information
// console.log(os.endianness());/// 
// console.log(os.freemem());/// free ram in bytes
// console.log(os.getPriority());/// return 0
// console.log(os.homedir());/// return home path = C:\Users\91815
// console.log(os.userInfo());/// username, home directory etc results
// console.log(os.version());/// Windows 10 Home Single Language
// console.log(os.release());/// release date = 10.0.22000
// console.log(os.platform());/// win 32
// console.log(os.networkInterfaces());/// bluetooth and ip etc details
// console.log(os.machine());/// return x86_64
// console.log(os.hostname());/// return host name  = milan


// #### Events And Event Eimter = for see how many api has been run
const { response } = require('express');
const express = require('express');
const app = express();

const EventEmiter = require('events');
const event = new EventEmiter();

let count = 0; // to see count


event.on('pageapi', ()=>{ // use on function on event and give name of event and function as a parameter
    count++ // increse by one 
    console.log("api called"+ count) //it show how many times api has been called 
});




app.get('/', (req,response)=>{
    response.send("home page")
    event.emit('pageapi') // give api name
})

app.get('/contact', (req,response)=>{
    response.send("contact page")
    event.emit('pageapi') // give api name
})


app.get('/about', (req,response)=>{
    response.send("about page")
    event.emit('pageapi') // give api name
})

app.listen(7000);



