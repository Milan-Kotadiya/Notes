1) install nodejs
2) install npm
3) Create Angular App = ng new app-name
4) Go to app = cd app-name
5) install bootstrap = npm install bootstrap
6) install jquery = npm install bootstrap
7) Add Style Package location in "Angular.json" file > "architect" > "build" > "Styles" : 
							just below "src/styles.css" Add "./node_modules/bootstrap/dist/css/bootstrap.min.css"

8) Add JS Package location in "Angular.json" file > "architect" > "build" > "Script" : 

							Add "./node_modules/bootstrap/dist/js/bootstrap.js"
9) Add Jquery Package location in "Angular.json" file > "architect" > "build" > "Script" : 
							just upper "./node_modules/bootstrap/dist/js/bootstrap.js" Add "./node_modules/jquery/dist/jquery.js"

10) Create New Component in Component Folder = ng generate component Components("Folder_Name")/"name"

12) Components Variable will be placed in "Component_name.component.ts" this file inside "export class AppComponent"
12) we can use vairable of specific compontent in html {{HERE}}. Like <h1> my name is {{name}}</h1>

in the .ts file of component you can see selector:
	'app-navbar',  == it name of component you can import as <app-navbar></app-navbar>
	templateUrl: './navbar.component.html',  == this is HTML file path
	styleUrls: ['./navbar.component.css']   == this is stylesheet file path

 



#### File_Structure #####

Folder Project = SRC Here ==> APP || ASSETS || ENVIRONMENT and Main Index.html,css,ts,spec.ts files ==> <app-root></app-root> ==> <div><app-navbar></app-navbar></div>
Folder SRC = APP || Components || STYLES || UTILS || App files html, css, ts and spec.ts
Folder Components => NAVBAR FOLDER => navbar html, css, ts and spec.ts

navbar.html ++ 
<div>
<---- HTML CODE ---->
</div>

navbar.css ++ 
.navbar{
css code
}

navbar.ts ++
import { Component } from '@angular/core';

@Component({
	selector: 'app-navbar', == Component name
	templateUrl: './navbar.component.html',  == this is HTML file path
	styleUrls: ['./navbar.component.css']   == this is stylesheet file path
})

export class NavbarComponent {
	<---- Variables Here ---->
}



#### ngFor Like Mapping #### in the page or component
In the navbar component, we have to get list item of navbar by mapping

1) first of all we have to describe data type which is going to mapping as a class and then export it. (We need nameofitem and path)
Create <file>.ts {for example maptype.ts}
export class maptype{
	nameofitem : string // we provide type so dont write string in '' or ""
	path : path
}

2) let's Add object Mapping, We are going to use in navbar so go to navbar.component.ts
	and just below export of that component 
	make object (let's Assume name is object), which is using maptype as a objectfunction
	
	 object:maptype[]; 
 

	we have to import maptype, example = import {Navbarty } from "./Navbarty";
	 and make object 

full example from starting 

export class NavbarComponent {
  navitemobj:Navbarty[];
  constructor(){
    this.navitemobj= [
      {
        navname : "Services",
        navlink : "/services"
      },
      {
        navname : "Technologies",
        navlink : "/technologies"
      },
      {
        navname : "Projects",
        navlink : "/projects"
      },
      {
        navname : "About",
        navlink : "/about"
      },
      {
        navname : "Careers",
        navlink : "/careers"
      },
      {
        navname : "Contact",
        navlink : "/contact"
      }
    ]
  }
}

3) use this mapping or ngFor data in navbar.component.html

<ul class="navbar-nav navbarlinks" *ngFor="let Navbarty of navitemobj">
		<li>
			<a href={{Navbarty.navlink}}>{{Navbarty.navname}}</a>
		</li>

##### Same Mapdata use in other component


for that you have to set data in page for example 

navbar and footbar both component include in home page 
so we have to set maptype in page folder and map object in page.ts  

1) lets see page div and use in footbar

<div *ngFor="let navbarty of navitemobj "> // define that type and object use small latter of navbarty
<app-footbar [navbarty]="navbarty"></app-footbar> //navbarty input like props  
</div>

2) go to footbar.component.ts and we have to accept that inputed navbarty
inside the class 
type @Input() navbarty:Navbarty 

3)import from '@angular/core'; input and Navbarty from 'directory'



Object.Object mapping


 <div class="d-flex justify-content-center technoimageboc" *ngFor="let Technotype of TechnoObj">
        <div class="imgandtextflex" *ngFor="let Technologies of this.Technotype.Technologies" >
            <!-- <li *ngFor="let item of items">{{item.name}}</li> -->
            <img class="homtechimg" src={{this.Technologies.Url}} alt="">
            <p class="homtechtext" >{{this.Technologies.Tech}}</p>
        </div>
    </div>




#### Routing ###

Go to app-routing.module.ts

and then 
import pages and give routes

const routes: Routes = [
  {
    component:HomepageComponent(this is page name),
    path:''(home )
  },
  {
    component:ServicepageComponent,
    path:'services'
  },
  {
    component:TechnologypageComponent,
    path:'technologies'
  },
  {
    component:ProjectpageComponent,
    path:'projects'
  },
  {
    component:AboutpageComponent,
    path:'about'
  },
  {
    component:CareerpageComponent,
    path:'careers'
  },
  {
    component:ContactpageComponent,
    path:'contact'
  },
  {
    component:ThankspageComponent,
    path:'thanks'
  }
];



in the navigation bar a tag write like

<a routerLink=/>Home</a>
<a routerLink=/technology>Technology</a>



### Typescript

## Installation

Within your npm project, run the following command to install the compiler:

npm install typescript --save-dev
Which should give you an output similar to:

added 1 package, and audited 2 packages in 2s
found 0 vulnerabilities
The compiler is installed in the node_modules directory and can be run with: npx tsc.

npx tsc
Which should give you an output similar to:

Version 4.5.5
tsc: The TypeScript Compiler - Version 4.5.5


there are two ways to assign type 
Explicit Type

let firstName: string = "Dylan";


Implicit Type
let firstName = "Dylan";


types of assignment types
boolean - true or false 
number - 0
string - text values like "Rocks"
any - disables type checking






Examples 

=> let Name:string = "Abhay";
console.log(Name); // Output Abhay

=> let names: any[] = [];
names=["One", "Two"]; 
names.push("Three") 

console.log(names); // Output [ 'One', 'Two', 'Three' ]


=> let names: readonly any[] = [];
names=["One", "Two"]; 

console.log(names); // [ 'One', 'Two' ]


=> let names: readonly any[] = [];
names=["One", "Two"]; 
names.push("Three") 

console.log(names); //prog.ts(5,7): error TS2339: Property 'push' does not exist on type 'readonly any[]'.


##Form Value Get ### 

in Html File

<input type="text" #username name="Username" placeholder="Username" />
<br/>
<input type="text" #password name="Username" placeholder="password" />
<br/>
<input type="text" #email name="Username" placeholder="email" />
<br/>
<input type="text" #lastl name="Username" placeholder="lastl" />
<br/>
<button (click)="getData(username.value,password.value,email.value,lastl.value)">Submit</button>

in TS file 
  usernameN:string = '';
  Password:string = '';
  Email:string = '';
  Last:string = '';
  getData(name:any,pass:any,email:any,last:any,){
    this.usernameN = name;
    this.Password = pass;
    this.Email = email;
    this.Last = last;

    console.log(name,pass,email,last)
  }