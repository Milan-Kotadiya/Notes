Go to Project like cd react-and-docker
-----------------------------------------------------------------------------------
Folder Structure

react-and-docker/
├── ecom-client/     # React App   
│   ├── ...	     # React App code
│   ├── Dockerfile   # Dockerfile for React App
│   └── ...
├── ecom-backend/         # Node.js + MongoDB App  
│   ├── ...	     # Node.js + MongoDB Code
│   ├── Dockerfile   # Dockerfile for Node.js App
│   └── ...
└── docker-compose.yml/compose.yaml

Docker Files for upper  Folder Structure
-----------------------------------------------------------------------------------
compose.yaml:=
version: '3.8' #docker version

services:
  client: # 1st container/service 
    build:
      context: ./ecom-client # folder path of app
    ports:
      - "3000:80"            # port on which app is running
    depends_on: 
      - backend              # name of container on which this app/container depends 
    networks:
      - my_network           # name of network, for all container related this project
    container_name: client   # name for this container (1st container)

  backend: # 2nd container 
    build:
      context: ./ecom-backend # folder path of app
    environment:
      NODE_ENV: production
    ports:
      - 5000:5000             # port on which app is running
    depends_on:
      - mongodb               # name of container on which this app/container depends
    networks:
      - my_network            # name of network, for all container related this project
    container_name: backend   # name for this container (2nd container)

  mongodb: # 3rd container 
    image: mongo:6.0.5
    ports:
      - "27017:27017"         # port on which database is running
    networks:
      - my_network            # name of network, for all container related this project
    container_name: mongodb   # name for this container (3rd container)
  
networks:
  my_network:                 # name of network, for this project
    driver: bridge 

-----------------------------------------------------------------------------------
Dockerfile   # Dockerfile for React App
# Use an official Node.js runtime as a parent image
FROM node:14-alpine as build

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json to the container
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the client source code to the container
COPY . .

# Build the client application
RUN npm run build

# Start with a smaller base image
FROM nginx:alpine

# Set the working directory in the container
WORKDIR /etc/nginx/conf.d

# Copy the custom Nginx configuration file
COPY default.conf . 

# Set the working directory in the container
WORKDIR /usr/share/nginx/html

# Copy the build output from the build stage to the final stage
COPY --from=build /usr/src/app/build .

# Expose port 80 to the outside world
EXPOSE 80

# Define the command to run your application
CMD ["nginx", "-g", "daemon off;"]

-----------------------------------------------------------------------------------
default.conf file path = ecom-client/default.conf

for solve nginx react routing issue

server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    location / {
         root   /usr/share/nginx/html;
          index  index.html index.htm;
         try_files $uri $uri/ /index.html;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}

-----------------------------------------------------------------------------------
Dockerfile   # Dockerfile for Node.js App
# Use an official Node.js runtime as a parent image
FROM node:14-alpine

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy package.json and package-lock.json to the container
COPY package*.json ./

# Install dependencies
RUN npm install --production

# Copy the backend source code to the container
COPY . .

# Expose port 5000 to the outside world
EXPOSE 5000

# Define the command to run your application
CMD ["npm", "start"]

-----------------------------------------------------------------------------------
COMMAND
For create docker container => docker init

start => docker compose up --build
stop => docker compose down

Build => docker build -t react-and-docker .
Run => docker run -it react-and-docker
-----------------------------------------------------------------------------------

	DATABASE CONNECTION ISSUE

 mongoose.connect("mongodb://0.0.0.0:27017/ecomApp");
 mongoose.connect("mongodb://localhost:27017/ecomApp", {
     useNewUrlParser: true,
     useUnifiedTopology: true,
   } as any); // for docker container localhost database
 mongoose.connect("mongodb://host.docker.internal:27017/ecomApp", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  } as any); // for docker machine database (pc)

 //CLOUD DATABASE
 mongoose.connect("mongodb://username:password@cloud-mongodb-ip:27017/ecomApp", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
} as any);
 mongoose.connect("mongodb://myuser:mypassword@123.456.789.10:27017/ecomApp", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
} as any);

-----------------------------------------------------------------------------------
					KUBERNETS
react-and-docker/
├── ecom-client/
│   ├── ...
│   ├── Dockerfile
│   └── ...
├── ecom-backend/
│   ├── ...
│   ├── Dockerfile
│   └── ...
├── k8s/  # this is kubernets file structure
│   ├── config.txt
│   ├── ecom-full.yaml
│   ├── mongodb-deployment.yaml
│   ├── backend-deployment.yaml
│   └── client-deployment.yaml
└── docker-compose.yml

# k8s/mongodb-deployment.yaml
---
# Define a persistent volume for MongoDB data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# MongoDB Deployment
# Deploys a single MongoDB instance
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:6.0.5
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongodb-storage
              mountPath: /data/db
      volumes:
        - name: mongodb-storage
          persistentVolumeClaim:
            claimName: mongodb-pvc
---
# k8s/mongodb-service.yaml
# MongoDB Service - Exposes MongoDB internally to other services
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
# k8s/backend-deployment.yaml
# Backend Deployment - Deploys Node.js backend service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: backend-image:latest
          ports:
            - containerPort: 5000
          env:
            - name: NODE_ENV
              value: "production"
            - name: MONGO_URI
              value: "mongodb://mongodb-service:27017/ecomApp"
---
# k8s/backend-service.yaml
# Backend Service - Exposes backend service internally
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP
---
# k8s/client-deployment.yaml
# Client Deployment - Deploys the React frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
        - name: client
          image: client-image:latest
          ports:
            - containerPort: 80
---
# k8s/client-service.yaml
# Client Service - Exposes React frontend as a LoadBalancer
apiVersion: v1
kind: Service
metadata:
  name: client-service
spec:
  selector:
    app: client
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
