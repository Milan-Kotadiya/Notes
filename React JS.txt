1. Install node
2. install npm
3. Create React App = npx create-react-app app-name

														#### File_Structure #####

app-name/
  ├── node_modules/         // Contains project dependencies installed by npm/yarn
  ├── public/               // Public assets and HTML template
  │   ├── favicon.ico       // Favicon icon displayed in the browser tab
  │   ├── index.html        // Main HTML template for the React app
  │   └── ...               // Other static assets like images, etc.
  ├── src/                  // Source code directory for the React application
  │   ├── components/       // Reusable React components used across the app
  │   │   ├── Navbar.js     // Component for the application-wide navigation bar
  │   │   └── ...           // Other reusable components
  │   ├── redux/       		
  │   │   ├── actions/
  │   │   │   ├── types.js          // Action type constants
  │   │   │   └── exampleActions.js // Action creators
  │   │   ├── reducers/
  │   │   │   └── rootReducer.js   // Combine all reducers here
  │   │   ├── store/
  │   │   │   └── store.js         // Redux store configuration
  │   │   └── middleware/
  │   │       └── logger.js        // Example middleware (optional)
  │   ├── pages/            // React components for each specific page/route
  │   │   ├── Home.js       // Component for the Home page
  │   │   ├── About.js      // Component for the About page
  │   │   └── ...           // Other page components
  │   ├── utils/            // Utility/helper functions or modules used in the app
  │   │   ├── Contact.js    // Utility module for contact-related functions
  │   │   └── ...           // Other utility modules
  │   ├── styles/           // CSS or styling files for components/pages
  │   │   ├── Home.css      // Styles specific to the Home page
  │   │   ├── About.css     // Styles specific to the About page
  │   │   └── ...           // Other styling files
  │   ├── App.js            // Main component defining app structure and routing
  │   ├── index.js          // Entry point for React rendering
  │   └── ...               // Other source files or folders
  ├── package.json          // Configuration and metadata about the project
  ├── package-lock.json     // Specific dependency versions generated by npm
  ├── yarn.lock             // Specific dependency versions generated by Yarn
  ├── README.md             // Documentation or information about the project
  └── ...                   // Other project-specific files or directories

															##### ROUTER APP.JSX #####

import {
  createBrowserRouter,
  RouterProvider,
} from "react-router-dom";

import Root, { rootLoader } from "./routes/root";
import Team, { teamLoader } from "./routes/team";
import NavBar from "./NavBar"; // Import your NavBar component

const router = createBrowserRouter([
  {
    path: "/",
    element: (
      <>
        <NavBar /> {/* Include NavBar component */}
        <Root />
      </>
    ),
    loader: rootLoader,
    children: [
      {
        path: "team",
        element: 
            <Team />
			,
        loader: teamLoader,
      },
    ],
  },
]);

return (
  <Navbar>
    <RouterProvider router={router} />
  </Navbar>
);


															##### Redux #####

Step 1: Create Action Type Constants
	File : src/redux/actions/types.js
		export const ADD_TODO = 'ADD_TODO';
		export const REMOVE_TODO = 'REMOVE_TODO';

Step 2: Create Action Creators
	File: src/redux/actions/exampleActions.js
		import { ADD_TODO, REMOVE_TODO } from './types';

		export const addTodo = (text) => ({
		type: ADD_TODO,
		payload: text,
		});

		export const removeTodo = (id) => ({
		type: REMOVE_TODO,
		payload: id,
		});

Step 3: Create Reducers
	File: src/redux/reducers/todoReducer.j
		import { ADD_TODO, REMOVE_TODO } from '../actions/types';

		const initialState = {
		todos: [],
		};

		const todoReducer = (state = initialState, action) => {
		switch (action.type) {
			case ADD_TODO:
			return {
				...state,
				todos: [...state.todos, action.payload],
			};
			case REMOVE_TODO:
			return {
				...state,
				todos: state.todos.filter((todo) => todo.id !== action.payload),
			};
			default:
			return state;
		}
		};

		export default todoReducer;

	File: src/redux/reducers/rootReducer.js
		import { combineReducers } from 'redux';
		import todoReducer from './todoReducer';

		const rootReducer = combineReducers({
		todos: todoReducer,
		// Combine other reducers here
		});

		export default rootReducer;

Step 4: Create the Redux Store Configuration
	File: src/redux/store/store.js
		import { createStore } from 'redux';
		import rootReducer from '../reducers/rootReducer';

		const store = createStore(
		rootReducer,
		);

		export default store;

Step 5: Usage in index.js
	File: src/index.js
		import React from 'react';
		import ReactDOM from 'react-dom';
		import { Provider } from 'react-redux';
		import App from './App';
		import store from './redux/store/store'; // Import the Redux store

		ReactDOM.render(
		<Provider store={store}>
			<App />
		</Provider>,
		document.getElementById('root')
		);

// Store Methods 
	store.subscribe(()=>{
		console.log(store.getState(),'store state changed.');
	})
